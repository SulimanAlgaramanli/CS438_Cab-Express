@startuml
set namespaceSeparator ::

class "cab_express::cab_splash_screen.dart::CabSplashScreen" {
  +State<CabSplashScreen> createState()
}

"flutter::src::widgets::framework.dart::StatefulWidget" <|-- "cab_express::cab_splash_screen.dart::CabSplashScreen"

class "cab_express::cab_splash_screen.dart::_CabSplashScreenState" {
  +void goToPath()
  +void initState()
  +Widget build()
}

"flutter::src::widgets::framework.dart::State" <|-- "cab_express::cab_splash_screen.dart::_CabSplashScreenState"

class "cab_express::controller::dashboard_controller::binding.dart::DashboardControllerBinding" {
  +void dependencies()
}

"get::get_instance::src::bindings_interface.dart::Bindings" <|-- "cab_express::controller::dashboard_controller::binding.dart::DashboardControllerBinding"

class "cab_express::controller::dashboard_controller::logic.dart::DashboardControllerLogic" {
  +DashboardControllerState state
  -Rx<States> _states
  {static} +DashboardControllerLogic instance
  +States profileStates
  +dynamic getProfileUser()
  +void changeNavIndex()
  +void onInit()
  +void onClose()
}

"cab_express::controller::dashboard_controller::logic.dart::DashboardControllerLogic" o-- "cab_express::controller::dashboard_controller::state.dart::DashboardControllerState"
"cab_express::controller::dashboard_controller::logic.dart::DashboardControllerLogic" o-- "get::get_rx::src::rx_types::rx_types.dart::Rx<States>"
"cab_express::controller::dashboard_controller::logic.dart::DashboardControllerLogic" o-- "cab_express::controller::dashboard_controller::logic.dart::DashboardControllerLogic"
"cab_express::controller::dashboard_controller::logic.dart::DashboardControllerLogic" o-- "cab_express::utils::states.dart::States"
"get::get_state_manager::src::simple::get_controllers.dart::GetxController" <|-- "cab_express::controller::dashboard_controller::logic.dart::DashboardControllerLogic"

class "cab_express::controller::dashboard_controller::state.dart::DashboardControllerState" {
  -RxInt _navScreenIndex
  +List<Widget> screens
  +int navScreenIndex
  +int screensLength
}

"cab_express::controller::dashboard_controller::state.dart::DashboardControllerState" o-- "get::get_rx::src::rx_types::rx_types.dart::RxInt"

class "cab_express::controller::login_controller::binding.dart::LoginControllerBinding" {
  +void dependencies()
}

"get::get_instance::src::bindings_interface.dart::Bindings" <|-- "cab_express::controller::login_controller::binding.dart::LoginControllerBinding"

class "cab_express::controller::login_controller::logic.dart::LoginControllerLogic" {
  +LoginControllerState state
  +FirebaseAuthServiceLogic authController
  {static} +LoginControllerLogic instance
  +States states
  +void clearAuthStates()
  +void onLoginPressed()
  +void onReady()
  +void onClose()
}

"cab_express::controller::login_controller::logic.dart::LoginControllerLogic" o-- "cab_express::controller::login_controller::state.dart::LoginControllerState"
"cab_express::controller::login_controller::logic.dart::LoginControllerLogic" o-- "cab_express::services::firebase_auth_service::logic.dart::FirebaseAuthServiceLogic"
"cab_express::controller::login_controller::logic.dart::LoginControllerLogic" o-- "cab_express::controller::login_controller::logic.dart::LoginControllerLogic"
"cab_express::controller::login_controller::logic.dart::LoginControllerLogic" o-- "cab_express::utils::states.dart::States"
"get::get_state_manager::src::simple::get_controllers.dart::GetxController" <|-- "cab_express::controller::login_controller::logic.dart::LoginControllerLogic"

class "cab_express::controller::login_controller::state.dart::LoginControllerState" {
  +GlobalKey<FormState> formKey
  +TextEditingController email
  +TextEditingController password
  -RxBool _secureText1
  +bool secureText1
  +UserAuthModel authForm
  +dynamic dispose()
}

"cab_express::controller::login_controller::state.dart::LoginControllerState" o-- "flutter::src::widgets::framework.dart::GlobalKey<FormState>"
"cab_express::controller::login_controller::state.dart::LoginControllerState" o-- "flutter::src::widgets::editable_text.dart::TextEditingController"
"cab_express::controller::login_controller::state.dart::LoginControllerState" o-- "get::get_rx::src::rx_types::rx_types.dart::RxBool"
"cab_express::controller::login_controller::state.dart::LoginControllerState" o-- "cab_express::data::models::core::user_auth.model.dart::UserAuthModel"

class "cab_express::controller::sign_up_controller::binding.dart::SignupControllerBinding" {
  +void dependencies()
}

"get::get_instance::src::bindings_interface.dart::Bindings" <|-- "cab_express::controller::sign_up_controller::binding.dart::SignupControllerBinding"

class "cab_express::controller::sign_up_controller::logic.dart::SignupControllerLogic" {
  +SignupControllerState state
  +FirebaseAuthServiceLogic authController
  {static} +SignupControllerLogic instance
  +States states
  +void clearAuthStates()
  +void onSignupPressed()
  +void onReady()
  +void onClose()
}

"cab_express::controller::sign_up_controller::logic.dart::SignupControllerLogic" o-- "cab_express::controller::sign_up_controller::state.dart::SignupControllerState"
"cab_express::controller::sign_up_controller::logic.dart::SignupControllerLogic" o-- "cab_express::services::firebase_auth_service::logic.dart::FirebaseAuthServiceLogic"
"cab_express::controller::sign_up_controller::logic.dart::SignupControllerLogic" o-- "cab_express::controller::sign_up_controller::logic.dart::SignupControllerLogic"
"cab_express::controller::sign_up_controller::logic.dart::SignupControllerLogic" o-- "cab_express::utils::states.dart::States"
"get::get_state_manager::src::simple::get_controllers.dart::GetxController" <|-- "cab_express::controller::sign_up_controller::logic.dart::SignupControllerLogic"

class "cab_express::controller::sign_up_controller::state.dart::SignupControllerState" {
  +GlobalKey<FormState> formKey
  +TextEditingController firstName
  +TextEditingController lastName
  +TextEditingController phoneNumber
  +TextEditingController email
  +TextEditingController password
  +TextEditingController passwordConfirmation
  -RxBool _secureText1
  -RxBool _secureText2
  +bool secureText1
  +bool secureText2
  +UserAuthModel authForm
  +dynamic dispose()
}

"cab_express::controller::sign_up_controller::state.dart::SignupControllerState" o-- "flutter::src::widgets::framework.dart::GlobalKey<FormState>"
"cab_express::controller::sign_up_controller::state.dart::SignupControllerState" o-- "flutter::src::widgets::editable_text.dart::TextEditingController"
"cab_express::controller::sign_up_controller::state.dart::SignupControllerState" o-- "get::get_rx::src::rx_types::rx_types.dart::RxBool"
"cab_express::controller::sign_up_controller::state.dart::SignupControllerState" o-- "cab_express::data::models::core::user_auth.model.dart::UserAuthModel"

class "cab_express::data::models::app::car.model.dart::CarModel" {
  +int? id
  +String? driverId
  +String? modelCar
  +int? numberOfPassenger
  +String? plateNumber
  +bool? isCurrentCar
}

class "cab_express::data::models::app::location.model.dart::LocationModel" {
  +int? id
  +double? long
  +double? lat
  +int hashCode
  +bool ==()
  +Map<String, dynamic> toMap()
}

class "cab_express::data::models::app::rate.model.dart::RateModel" {
  +int? id
  +int? tripId
  +double? value
  +int hashCode
  +bool ==()
}

class "cab_express::data::models::app::services_type.model.dart::ServicesType" {
  +int? id
  +int? numberOfPassengers
  +Gender? gender
  +bool? isSharedTrip
  +int hashCode
  +bool ==()
}

"cab_express::data::models::app::services_type.model.dart::ServicesType" o-- "cab_express::utils::gender.enum.dart::Gender"

class "cab_express::data::models::app::trip.model.dart::TripModel" {
  +int? id
  +int? customerId
  +int? driverId
  +LocationModel? from
  +LocationModel? to
  +ServicesType? servicesType
  +double? cost
  +DateTime? timeTaken
  +LocationModel? driverLocation
  +int hashCode
  +bool ==()
}

"cab_express::data::models::app::trip.model.dart::TripModel" o-- "cab_express::data::models::app::location.model.dart::LocationModel"
"cab_express::data::models::app::trip.model.dart::TripModel" o-- "cab_express::data::models::app::services_type.model.dart::ServicesType"

class "cab_express::data::models::core::customer.model.dart::CustomerModel" {
  +List<LocationModel>? locations
  +int hashCode
  +bool ==()
}

"cab_express::data::models::core::user.model.dart::UserModel" <|-- "cab_express::data::models::core::customer.model.dart::CustomerModel"

class "cab_express::data::models::core::driver.model.dart::DriverModel" {
  +List<CarModel>? cars
  +int hashCode
  +bool ==()
}

"cab_express::data::models::core::user.model.dart::UserModel" <|-- "cab_express::data::models::core::driver.model.dart::DriverModel"

abstract class "cab_express::data::models::core::user.model.dart::UserModel" {
  +String? id
  +String? email
  +String? firstName
  +String? lastName
  +String? phoneNumber
  +UserType? userType
}

"cab_express::data::models::core::user.model.dart::UserModel" o-- "cab_express::utils::user_type.enum.dart::UserType"

class "cab_express::data::models::core::user_auth.model.dart::UserAuthModel" {
  +String? password
  +int hashCode
  +bool ==()
  +UserAuthModel copyWith()
  +Map<String, dynamic> toNewUserJson()
}

"cab_express::data::models::core::user.model.dart::UserModel" <|-- "cab_express::data::models::core::user_auth.model.dart::UserAuthModel"

class "cab_express::firebase_options.dart::DefaultFirebaseOptions" {
  {static} +FirebaseOptions android
  {static} +FirebaseOptions ios
  {static} +FirebaseOptions currentPlatform
}

"cab_express::firebase_options.dart::DefaultFirebaseOptions" o-- "firebase_core_platform_interface::firebase_core_platform_interface.dart::FirebaseOptions"

abstract class "cab_express::global::assets.dart::AppAssets" {
  {static} +String cabLogo
}

abstract class "cab_express::global::cab_colors.dart::CabColors" {
  {static} +MaterialColor primary
  {static} +Color? primaryLight
  {static} +Color appBarTitle
  {static} +Color backgroundHome
}

"cab_express::global::cab_colors.dart::CabColors" o-- "flutter::src::material::colors.dart::MaterialColor"
"cab_express::global::cab_colors.dart::CabColors" o-- "dart::ui::Color"

abstract class "cab_express::global::cab_constants.dart::CabConstants" {
  {static} +String users
}

abstract class "cab_express::global::cab_theme.dart::CabTheme" {
  {static} +ThemeData themeApp()
}

class "cab_express::main.dart::CabExpressApp" {
  +Widget build()
}

"flutter::src::widgets::framework.dart::StatelessWidget" <|-- "cab_express::main.dart::CabExpressApp"

class "cab_express::routes::cab_app_routes.dart::CabAppRoutes" {
  {static} +String cabRoot
  {static} +String cabLoginScreen
  {static} +String cabSignupScreen
  {static} +String cabDashboardScreen
  {static} +List<GetPage<dynamic>> routes
}

class "cab_express::services::firebase_auth_service::binding.dart::FirebaseAuthServiceBinding" {
  +void dependencies()
}

"get::get_instance::src::bindings_interface.dart::Bindings" <|-- "cab_express::services::firebase_auth_service::binding.dart::FirebaseAuthServiceBinding"

class "cab_express::services::firebase_auth_service::logic.dart::FirebaseAuthServiceLogic" {
  +FirebaseAuthServiceState state
  -Rx<States> _authStates
  {static} +FirebaseAuthServiceLogic instance
  +States authStates
  +dynamic signUpWithEmailAndPassword()
  +dynamic loginWithEmailAndPassword()
  +dynamic saveUserProfileInfo()
  +dynamic fetchUserProfileInformation()
  +void onReady()
  +void onClose()
}

"cab_express::services::firebase_auth_service::logic.dart::FirebaseAuthServiceLogic" o-- "cab_express::services::firebase_auth_service::state.dart::FirebaseAuthServiceState"
"cab_express::services::firebase_auth_service::logic.dart::FirebaseAuthServiceLogic" o-- "get::get_rx::src::rx_types::rx_types.dart::Rx<States>"
"cab_express::services::firebase_auth_service::logic.dart::FirebaseAuthServiceLogic" o-- "cab_express::services::firebase_auth_service::logic.dart::FirebaseAuthServiceLogic"
"cab_express::services::firebase_auth_service::logic.dart::FirebaseAuthServiceLogic" o-- "cab_express::utils::states.dart::States"
"get::get_state_manager::src::rx_flutter::rx_disposable.dart::GetxService" <|-- "cab_express::services::firebase_auth_service::logic.dart::FirebaseAuthServiceLogic"

class "cab_express::services::firebase_auth_service::state.dart::FirebaseAuthServiceState" {
  +FirebaseAuth auth
  +FirebaseFirestore fireStore
}

"cab_express::services::firebase_auth_service::state.dart::FirebaseAuthServiceState" o-- "firebase_auth::firebase_auth.dart::FirebaseAuth"
"cab_express::services::firebase_auth_service::state.dart::FirebaseAuthServiceState" o-- "cloud_firestore::cloud_firestore.dart::FirebaseFirestore"

class "cab_express::services::local_storage_service.dart::LocalStorageService" {
  -Rx<CustomerModel> _customer
  -Rx<DriverModel> _driver
  {static} +LocalStorageService instance
  +CustomerModel customer
  +DriverModel driver
  +dynamic init()
}

"cab_express::services::local_storage_service.dart::LocalStorageService" o-- "get::get_rx::src::rx_types::rx_types.dart::Rx<CustomerModel>"
"cab_express::services::local_storage_service.dart::LocalStorageService" o-- "get::get_rx::src::rx_types::rx_types.dart::Rx<DriverModel>"
"cab_express::services::local_storage_service.dart::LocalStorageService" o-- "cab_express::services::local_storage_service.dart::LocalStorageService"
"cab_express::services::local_storage_service.dart::LocalStorageService" o-- "cab_express::data::models::core::customer.model.dart::CustomerModel"
"cab_express::services::local_storage_service.dart::LocalStorageService" o-- "cab_express::data::models::core::driver.model.dart::DriverModel"
"get::get_state_manager::src::rx_flutter::rx_disposable.dart::GetxService" <|-- "cab_express::services::local_storage_service.dart::LocalStorageService"


class "cab_express::utils::equality.util.dart::EqualityUtil" {
  {static} +bool listEquality()
}

class "cab_express::utils::gender.enum.dart::Gender" {
  +int index
  {static} +List<Gender> values
  {static} +Gender male
  {static} +Gender female
}

"cab_express::utils::gender.enum.dart::Gender" o-- "cab_express::utils::gender.enum.dart::Gender"
"dart::core::Enum" <|-- "cab_express::utils::gender.enum.dart::Gender"

abstract class "cab_express::utils::input_validator.dart::InputValidator" {
  {static} +RegExp passwordRegex
  {static} -RegExp _phoneNumberRegex
  {static} +String? isRequired()
  {static} +String? isUsername()
  {static} +String? isPhoneNumber()
  {static} +String? isEmail()
  {static} +String? isValidPassword()
  {static} +String? isMatchPasswordConfirmation()
}

class "cab_express::utils::states.dart::States" {
  +String? messages
  +bool isLoading
  +bool isError
  +bool isSuccess
  +States copyWith()
}

abstract class "cab_express::utils::time_utility.dart::TimeUtilities" {
  {static} +String? fromServerFormatDateTime12()
  {static} +String? fromServerFormatDateTime24()
  {static} +String? strDateFormatter()
  {static} +String calculateTimeAgo()
}

class "cab_express::utils::user_type.enum.dart::UserType" {
  +int index
  {static} +List<UserType> values
  {static} +UserType customer
  {static} +UserType driver
}

"cab_express::utils::user_type.enum.dart::UserType" o-- "cab_express::utils::user_type.enum.dart::UserType"
"dart::core::Enum" <|-- "cab_express::utils::user_type.enum.dart::UserType"

class "cab_express::widgets::back_arrow_button.dart::BackArrowButton" {
  +void Function()? onPressed
  +Widget? icon
  +Widget build()
}

"cab_express::widgets::back_arrow_button.dart::BackArrowButton" o-- "dart::ui::void Function()"
"cab_express::widgets::back_arrow_button.dart::BackArrowButton" o-- "flutter::src::widgets::framework.dart::Widget"
"flutter::src::widgets::framework.dart::StatelessWidget" <|-- "cab_express::widgets::back_arrow_button.dart::BackArrowButton"

class "cab_express::widgets::cab_logo.dart::CabLogo" {
  +double iconSize
  +double borderRadiusValue
  +Widget build()
}

"flutter::src::widgets::framework.dart::StatelessWidget" <|-- "cab_express::widgets::cab_logo.dart::CabLogo"

class "cab_express::widgets::custom_button.dart::CustomButton" {
  +void Function()? onPressed
  +ButtonStyle? style
  +Widget? child
  -ButtonStyle? _getButtonStyle()
  +Widget build()
}

"cab_express::widgets::custom_button.dart::CustomButton" o-- "null::void Function()"
"cab_express::widgets::custom_button.dart::CustomButton" o-- "flutter::src::material::button_style.dart::ButtonStyle"
"cab_express::widgets::custom_button.dart::CustomButton" o-- "flutter::src::widgets::framework.dart::Widget"
"flutter::src::widgets::framework.dart::StatelessWidget" <|-- "cab_express::widgets::custom_button.dart::CustomButton"

class "cab_express::widgets::labeld_Input_widget.dart::LabeledInput" {
  +String? label
  +String? hintText
  +TextEditingController? controller
  +String? Function(String?)? validator
  +bool secureField
  +Widget? suffixIcon
  +bool readOnly
  +void Function()? onTapped
  +Widget build()
}

"cab_express::widgets::labeld_Input_widget.dart::LabeledInput" o-- "flutter::src::widgets::editable_text.dart::TextEditingController"
"cab_express::widgets::labeld_Input_widget.dart::LabeledInput" o-- "null::String Function(String)"
"cab_express::widgets::labeld_Input_widget.dart::LabeledInput" o-- "flutter::src::widgets::framework.dart::Widget"
"cab_express::widgets::labeld_Input_widget.dart::LabeledInput" o-- "null::void Function()"
"flutter::src::widgets::framework.dart::StatelessWidget" <|-- "cab_express::widgets::labeld_Input_widget.dart::LabeledInput"

class "cab_express::widgets::margin_text.dart::MarginText" {
  +double v
  +double h
  +Widget? child
  +String? text
  +TextStyle? style
  +Widget build()
}

"cab_express::widgets::margin_text.dart::MarginText" o-- "flutter::src::widgets::framework.dart::Widget"
"cab_express::widgets::margin_text.dart::MarginText" o-- "flutter::src::painting::text_style.dart::TextStyle"
"flutter::src::widgets::framework.dart::StatelessWidget" <|-- "cab_express::widgets::margin_text.dart::MarginText"

class "cab_express::widgets::question_widget_button.dart::QuestionButtonWidget" {
  +String? question
  +String? labelBtn
  +void Function()? onPressed
  +Widget build()
}

"cab_express::widgets::question_widget_button.dart::QuestionButtonWidget" o-- "dart::ui::void Function()"
"flutter::src::widgets::framework.dart::StatelessWidget" <|-- "cab_express::widgets::question_widget_button.dart::QuestionButtonWidget"

class "cab_express::widgets::search_app_bar.dart::CustomSearchAppBar" {
  +FocusNode? focusNode
  +Widget? appBarTitle
  +void Function()? onBackTap
  +void Function()? onCancelSearchTap
  +void Function()? onSearchTextTap
  +void Function()? onSearchButtonTap
  +void Function()? onActionButtonTapped
  +void Function(String)? onTextSearchChanged
  +bool isTextFieldEmpty
  +bool hideTextField
  +String? hintText
  +double? toolbarHeight
  +Widget? actionButton
  +TextEditingController? textController
  +State<CustomSearchAppBar> createState()
}

"cab_express::widgets::search_app_bar.dart::CustomSearchAppBar" o-- "flutter::src::widgets::focus_manager.dart::FocusNode"
"cab_express::widgets::search_app_bar.dart::CustomSearchAppBar" o-- "flutter::src::widgets::framework.dart::Widget"
"cab_express::widgets::search_app_bar.dart::CustomSearchAppBar" o-- "null::void Function()"
"cab_express::widgets::search_app_bar.dart::CustomSearchAppBar" o-- "null::void Function(String)"
"cab_express::widgets::search_app_bar.dart::CustomSearchAppBar" o-- "flutter::src::widgets::editable_text.dart::TextEditingController"
"flutter::src::widgets::framework.dart::StatefulWidget" <|-- "cab_express::widgets::search_app_bar.dart::CustomSearchAppBar"

class "cab_express::widgets::search_app_bar.dart::_CustomSearchAppBarState" {
  +bool isTextFieldEmpty
  +bool hideTextField
  +String? hintText
  +double? toolbarHeight
  +Widget? actionButton
  +Widget build()
  -Widget _showTextField()
  -Widget _buildLeadingButton()
}

"cab_express::widgets::search_app_bar.dart::_CustomSearchAppBarState" o-- "flutter::src::widgets::framework.dart::Widget"
"flutter::src::widgets::framework.dart::State" <|-- "cab_express::widgets::search_app_bar.dart::_CustomSearchAppBarState"


@enduml
